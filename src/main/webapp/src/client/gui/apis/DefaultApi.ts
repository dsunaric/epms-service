/* tslint:disable */
/* eslint-disable */
/**
 * gui
 * EPMS API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AppliedRule,
    AppliedRuleFromJSON,
    AppliedRuleToJSON,
} from '../models';

export interface PostSuggestionsRequest {
    processModel?: Blob;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary get suggestions for the given executable bpmn
     * @param {Blob} [processModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postSuggestionsRaw(requestParameters: PostSuggestionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AppliedRule>>>;

    /**
     * get suggestions for the given executable bpmn
     */
    postSuggestions(requestParameters: PostSuggestionsRequest, initOverrides?: RequestInit): Promise<Array<AppliedRule>>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * get suggestions for the given executable bpmn
     */
    async postSuggestionsRaw(requestParameters: PostSuggestionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AppliedRule>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.processModel !== undefined) {
            formParams.append('processModel', requestParameters.processModel as any);
        }

        const response = await this.request({
            path: `/suggestions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppliedRuleFromJSON));
    }

    /**
     * get suggestions for the given executable bpmn
     */
    async postSuggestions(requestParameters: PostSuggestionsRequest, initOverrides?: RequestInit): Promise<Array<AppliedRule>> {
        const response = await this.postSuggestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
