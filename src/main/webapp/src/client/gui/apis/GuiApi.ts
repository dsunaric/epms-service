/* tslint:disable */
/* eslint-disable */
/**
 * gui
 * GUI API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AvatarOfMemberRequest {
    memberId: number;
}

/**
 * GuiApi - interface
 * 
 * @export
 * @interface GuiApiInterface
 */
export interface GuiApiInterface {
    /**
     * 
     * @summary load avatar for given member id
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuiApiInterface
     */
    avatarOfMemberRaw(requestParameters: AvatarOfMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>>;

    /**
     * load avatar for given member id
     */
    avatarOfMember(requestParameters: AvatarOfMemberRequest, initOverrides?: RequestInit): Promise<Blob>;

    /**
     * 
     * @summary load current user from security context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuiApiInterface
     */
    currentUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>>;

    /**
     * load current user from security context
     */
    currentUser(initOverrides?: RequestInit): Promise<User>;

}

/**
 * 
 */
export class GuiApi extends runtime.BaseAPI implements GuiApiInterface {

    /**
     * load avatar for given member id
     */
    async avatarOfMemberRaw(requestParameters: AvatarOfMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling avatarOfMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gui/member/{memberId}/avatar`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * load avatar for given member id
     */
    async avatarOfMember(requestParameters: AvatarOfMemberRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.avatarOfMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * load current user from security context
     */
    async currentUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gui/currentUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * load current user from security context
     */
    async currentUser(initOverrides?: RequestInit): Promise<User> {
        const response = await this.currentUserRaw(initOverrides);
        return await response.value();
    }

}
