/* tslint:disable */
/* eslint-disable */
/**
 * gui
 * EPMS API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EffectedElement,
    EffectedElementFromJSON,
    EffectedElementFromJSONTyped,
    EffectedElementToJSON,
} from './';

/**
 * 
 * @export
 * @interface AppliedRule
 */
export interface AppliedRule {
    /**
     * 
     * @type {string}
     * @memberof AppliedRule
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AppliedRule
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AppliedRule
     */
    details?: string;
    /**
     * 
     * @type {Array<EffectedElement>}
     * @memberof AppliedRule
     */
    effectedElements?: Array<EffectedElement>;
}

export function AppliedRuleFromJSON(json: any): AppliedRule {
    return AppliedRuleFromJSONTyped(json, false);
}

export function AppliedRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppliedRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'effectedElements': !exists(json, 'effectedElements') ? undefined : ((json['effectedElements'] as Array<any>).map(EffectedElementFromJSON)),
    };
}

export function AppliedRuleToJSON(value?: AppliedRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'description': value.description,
        'details': value.details,
        'effectedElements': value.effectedElements === undefined ? undefined : ((value.effectedElements as Array<any>).map(EffectedElementToJSON)),
    };
}

